name: Terraform Apply

on:
  workflow_dispatch:
  pull_request:
    types: [closed]
    branches:
      - main
    paths:
      - "**.tf"
      - "**.tfvars"

permissions:
  contents: read
  id-token: write

env:
  TERRAFORM_DIR: terraform
  TERRAFORM_VERSION: 1.7.0
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
  TERRAFORM_ENVIRONMENTS: "main=prod,dev=dev,DEFAULT=dev"
  TERRAFORM_PLAN_BUCKET: ${{ secrets.TERRAFORM_PLAN_BUCKET }} # S3 bucket to store/ retrieve plan files.
  COMMIT_SHA: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
  BRANCH_NAME: ${{ github.event.pull_request.base.ref }}

jobs:
  get-environments:
    runs-on: ubuntu-latest
    outputs:
      envs: ${{ steps.set-envs.outputs.envs }}
    steps:
      - id: set-envs
        run: |
          # Convert TERRAFORM_ENVIRONMENTS into an associative array
          declare -A MAPPINGS
          IFS=',' read -ra PAIRS <<< "${{ env.TERRAFORM_ENVIRONMENTS }}"
          for pair in "${PAIRS[@]}"; do
            IFS='=' read -ra KV <<< "$pair"
            MAPPINGS[${KV[0]}]=${KV[1]}
          done

          # Determine the environment
          ENVIRONMENT=${MAPPINGS[${{ env.BRANCH_NAME }}]:-${MAPPINGS["DEFAULT"]}}

          OUTPUT=$(jq -n --arg environment "$ENVIRONMENT" '{include: [{environment: $environment}]}')

          echo "Environment: $ENVIRONMENT"
          echo "Output: $OUTPUT"
          echo "envs=$OUTPUT" >> $GITHUB_OUTPUT

  apply:
    needs: get-environments
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    strategy:
      matrix: ${{ fromJSON(needs.get-environments.outputs.envs) }}
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ env.BRANCH_NAME }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        id: init
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform init

      - name: Set Terraform Workspace
        id: set-workspace
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: |
          echo "Workspace: ${{ matrix.environment }}"

          terraform workspace new ${{ matrix.environment }} || terraform workspace select ${{ matrix.environment }}

      - name: Download Plan
        id: download-plan
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: aws s3 cp s3://${{ env.TERRAFORM_PLAN_BUCKET }}/tf-plan/${{ env.COMMIT_SHA }}/${{ matrix.environment }}/tfplan tfplan

      - name: Terraform Apply
        id: apply
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: |
          terraform apply "tfplan"
