name: Terraform Plan

on:
  workflow_dispatch:
  pull_request:
    paths:
      - "**.tf"
      - "**.tfvars"

permissions:
  contents: read
  id-token: write

env:
  TERRAFORM_DIR: terraform
  TERRAFORM_VERSION: 1.7.0
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
  TERRAFORM_PLAN_BUCKET: ${{ secrets.TERRAFORM_PLAN_BUCKET }} # S3 bucket to store/ retrieve plan files.
  TERRAFORM_ENVIRONMENTS: ${{ secrets.TERRAFORM_ENVIRONMENTS != '' && secrets.TERRAFORM_ENVIRONMENTS || 'default' }} # Define environments here, e.g: "dev,uat,prod"
  COMMIT_SHA: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}

jobs:
  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      statuses: write
    outputs:
      fmtOutcome: ${{ steps.fmt.outcome }}
      validateOutcome: ${{ steps.validate.outcome }}
      checkovOutcome: ${{ steps.checkov.outcome }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -list=true -check=true -recursive

      - name: Terraform Init
        id: init
        working-directory: ${{ env.TERRAFORM_DIR }}
        continue-on-error: true
        run: terraform init -backend=false

      - name: Terraform Validate
        id: validate
        working-directory: ${{ env.TERRAFORM_DIR }}
        continue-on-error: true
        run: |
          terraform validate

      - name: Run Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@v12.2500.0
        continue-on-error: true
        with:
          quiet: true

  get-environments:
    runs-on: ubuntu-latest
    outputs:
      envs: ${{ steps.set-envs.outputs.envs }}
    steps:
      - id: set-envs
        run: |
          OUTPUT=$(echo '${{ env.TERRAFORM_ENVIRONMENTS }}' | jq -R -c '{include: (split(",") | map({environment: .}))}')

          echo $OUTPUT
          echo "envs=$OUTPUT" >> $GITHUB_OUTPUT

  plan:
    needs: get-environments
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    strategy:
      matrix: ${{ fromJSON(needs.get-environments.outputs.envs) }}

    outputs:
      planOutcome: ${{ steps.plan.outcome }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        id: init
        working-directory: ${{ env.TERRAFORM_DIR }}
        continue-on-error: true
        run: terraform init

      - name: Set Terraform Workspace
        id: set-workspace
        run: |
          echo "Workspace: ${{ matrix.environment }}"

          terraform workspace new ${{ matrix.environment }} || terraform workspace select ${{ matrix.environment }}

      - name: Determine Var Files
        id: varfiles
        run: |
          if [ "${{ matrix.environment }}" != "default" ]; then
            OUTPUT="-var-file=common.tfvars -var-file=${{ matrix.environment }}.tfvars"
            echo "varfiles=$OUTPUT" >> $GITHUB_ENV
          fi

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan ${{ env.varfiles }} -out=tfplan-${{ env.COMMIT_SHA }}

      - name: Upload Plan Artefacts
        id: upload-plan
        run: aws s3 cp tfplan-${{ env.COMMIT_SHA }} s3://${{ env.TERRAFORM_PLAN_BUCKET }}/tf-plan/${{ env.COMMIT_SHA }}/${{ matrix.environment }}/tfplan

  comment-on-pr:
    needs: [lint, get-environments, plan]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      id-token: write
    steps:
      - name: PR Comment
        uses: actions/github-script@v6
        env:
          ENVIRONMENTS: ${{ needs.get-environments.outputs.envs }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fmtOutcome = "${{ needs.lint.outputs.fmtOutcome }}";
            const validateOutcome = "${{ needs.lint.outputs.validateOutcome }}";
            const checkovOutcome = "${{ needs.lint.outputs.checkovOutcome }}";
            const planOutcome = "${{ needs.plan.outputs.planOutcome }}";
            const environments = JSON.parse(process.env.ENVIRONMENTS).include.map(item => item.environment);

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const output = `#### Checkov Results 🛡️: \`${checkovOutcome}\`
            \n#### Terraform Fmt Check Results 🧹: \`${fmtOutcome}\`
            \n#### Terraform Validate Results 🤖 : \`${validateOutcome}\`
            \n#### Terraform Plan Results 🧪: \`${planOutcome}\`
            `;

            const botComment = comments.find(comment => comment.user.type === 'Bot' && comment.body.includes('Checkov Results'));
               
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
